buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {url "http://developer.marklogic.com/maven2/"}
        flatDir {
            dirs 'marklogic-rdf4j/build/libs/marklogic-rdf4j-2.0.0.jar'
        }
    }
    dependencies {
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.1.3"
    }
}

plugins {
    id 'me.champeau.gradle.jmh' version '0.1.3'
}

apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven'

configure(allprojects){
            ext.slf4jVersion = '1.7.2'
            ext.logbackVersion = '1.0.9'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile('com.marklogic:marklogic-rdf4j:2.0.0')

    compile('org.slf4j:slf4j-api:1.7.10')
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"

    compile 'org.openjdk.jmh:jmh-core:1.3.2'
    compile 'org.openjdk.jmh:jmh-generator-annprocess:1.3.2'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

jmh {
    //include = 'some regular expression' // include pattern (regular expression) for benchmarks to be executed
    //exclude = 'some regular expression' // exclude pattern (regular expression) for benchmarks to be executed
    iterations = 5 // Number of measurement iterations to do.
    forceGC = false // Should JMH force GC between iterations?
    //jvmArgs = 'Custom JVM args to use when forking.'
    //jvmArgsAppend = 'Custom JVM args to use when forking (append these)'
    //jvmArgsPrepend = 'Custom JVM args to use when forking (prepend these)'
    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt") // results file
    resultFormat = 'JSON' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
    //timeUnit = 'ms' // Output time unit. Available time units are: [m, s, ms, us, ns].
    verbosity = 'NORMAL' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
    warmup = '1s' // Time to spend at each warmup iteration.
    warmupBatchSize = 2 // Warmup batch size: number of benchmark method calls per operation.
    warmupForks = 0 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
    warmupIterations = 1 // Number of warmup iterations to do.
    warmupMode = 'INDI' // Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].
    warmupBenchmarks = ['.*Warmup'] // Warmup benchmarks to include in the run in addition to already selected. JMH will not measure these benchmarks, but only use them for the warmup.
}

